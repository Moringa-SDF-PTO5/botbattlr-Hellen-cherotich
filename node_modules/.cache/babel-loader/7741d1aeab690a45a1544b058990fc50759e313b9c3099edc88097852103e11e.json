{"ast":null,"code":"var _jsxFileName = \"/root/botbattlr-Hellen-cherotich/src/components/BotCollection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport BotCard from './BotCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BotCollection = ({\n  enlistBot\n}) => {\n  _s();\n  const [bots, setBots] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`https://json-server-8vqy.onrender.com/bots`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch data');\n        }\n        const contentType = response.headers.get('content-type');\n        if (!contentType || !contentType.includes('application/json')) {\n          throw new Error('Response is not in JSON format');\n        }\n        const data = await response.json();\n        setBots(data.map(bot => ({\n          ...bot,\n          enlisted: false\n        }))); // Add enlisted property to each bot\n      } catch (error) {\n        console.error('Error fetching bots:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleEnlistment = botId => {\n    setBots(prevBots => prevBots.map(bot => bot.id === botId ? {\n      ...bot,\n      enlisted: true\n    } : bot));\n    enlistBot(botId); // Pass botId to the enlistBot function\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bot-collection\",\n    children: bots.map(bot => /*#__PURE__*/_jsxDEV(BotCard, {\n      bot: bot,\n      onEnlist: () => handleEnlistment(bot.id)\n    }, bot.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this) // Pass onEnlist function with botId\n    )\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(BotCollection, \"HLWYdwhjlsHzdjlYtqtFyxxPKrE=\");\n_c = BotCollection;\nexport default BotCollection;\nvar _c;\n$RefreshReg$(_c, \"BotCollection\");","map":{"version":3,"names":["React","useState","useEffect","BotCard","jsxDEV","_jsxDEV","BotCollection","enlistBot","_s","bots","setBots","fetchData","response","fetch","ok","Error","contentType","headers","get","includes","data","json","map","bot","enlisted","error","console","handleEnlistment","botId","prevBots","id","className","children","onEnlist","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/root/botbattlr-Hellen-cherotich/src/components/BotCollection.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport BotCard from './BotCard';\n\nconst BotCollection = ({ enlistBot }) => {\n  const [bots, setBots] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`https://json-server-8vqy.onrender.com/bots`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch data');\n        }\n  \n        const contentType = response.headers.get('content-type');\n        if (!contentType || !contentType.includes('application/json')) {\n          throw new Error('Response is not in JSON format');\n        }\n  \n        const data = await response.json();\n        setBots(data.map(bot => ({ ...bot, enlisted: false }))); // Add enlisted property to each bot\n      } catch (error) {\n        console.error('Error fetching bots:', error);\n      }\n    };\n  \n    fetchData();\n  }, []);\n\n  const handleEnlistment = (botId) => {\n    setBots(prevBots => prevBots.map(bot =>\n      bot.id === botId ? { ...bot, enlisted: true } : bot\n    ));\n    enlistBot(botId); // Pass botId to the enlistBot function\n  };\n\n  return (\n    <div className=\"bot-collection\">\n      {bots.map(bot => (\n        <BotCard key={bot.id} bot={bot} onEnlist={() => handleEnlistment(bot.id)} /> // Pass onEnlist function with botId\n      ))}\n    </div>\n  );\n};\n\nexport default BotCollection;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAU,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,4CAA2C,CAAC;QAC1E,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;QACzC;QAEA,MAAMC,WAAW,GAAGJ,QAAQ,CAACK,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QACxD,IAAI,CAACF,WAAW,IAAI,CAACA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;UAC7D,MAAM,IAAIJ,KAAK,CAAC,gCAAgC,CAAC;QACnD;QAEA,MAAMK,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QAClCX,OAAO,CAACU,IAAI,CAACE,GAAG,CAACC,GAAG,KAAK;UAAE,GAAGA,GAAG;UAAEC,QAAQ,EAAE;QAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC3D,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDd,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMgB,gBAAgB,GAAIC,KAAK,IAAK;IAClClB,OAAO,CAACmB,QAAQ,IAAIA,QAAQ,CAACP,GAAG,CAACC,GAAG,IAClCA,GAAG,CAACO,EAAE,KAAKF,KAAK,GAAG;MAAE,GAAGL,GAAG;MAAEC,QAAQ,EAAE;IAAK,CAAC,GAAGD,GAClD,CAAC,CAAC;IACFhB,SAAS,CAACqB,KAAK,CAAC,CAAC,CAAC;EACpB,CAAC;EAED,oBACEvB,OAAA;IAAK0B,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAC5BvB,IAAI,CAACa,GAAG,CAACC,GAAG,iBACXlB,OAAA,CAACF,OAAO;MAAcoB,GAAG,EAAEA,GAAI;MAACU,QAAQ,EAAEA,CAAA,KAAMN,gBAAgB,CAACJ,GAAG,CAACO,EAAE;IAAE,GAA3DP,GAAG,CAACO,EAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAuD,CAAC,CAAC;IAC9E;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC7B,EAAA,CAxCIF,aAAa;AAAAgC,EAAA,GAAbhC,aAAa;AA0CnB,eAAeA,aAAa;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}